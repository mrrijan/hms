<?php

namespace Api;

use Faker\Factory as Faker;
use App\Models\Reservation;
use App\Models\User;
use Database\Seeders\CustomerSeeder;
use Database\Seeders\RoomSeeder;
use Database\Seeders\UserSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ReservationApiTest extends TestCase
{
    /**
     * A basic feature test example.
     */
    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed(UserSeeder::class);

        $user = User::where('email', 'lamarijan@gmail.com')->first();
        $this->actingAs($user, 'web');
    }

    public function test_get_route()
    {
        $this->seed(CustomerSeeder::class);
        $this->seed(RoomSeeder::class);
        $reservations = Reservation::factory(10)->create();
        $reservationIds = $reservations->map(fn($reservation) => $reservation->id);

        $response = $this->get('/api/reservations');
        $response->assertStatus(200);

        $data = $response->json('data');

        collect($data)->each(fn($reservation) => $this->assertTrue(in_array($reservation["id"], $reservationIds->toArray())));
    }

    public function test_show_route()
    {
        $reservation = Reservation::factory(1)->create()[0];

        $response = $this->get('/api/reservation/' . $reservation->id);

        $result = $response->assertStatus(200)->json('data');

        $this->assertEquals(data_get($result, 'id'), $reservation->id);
    }

    public function test_post_route()
    {
        $this->seed(CustomerSeeder::class);
        $this->seed(RoomSeeder::class);
        $faker = Faker::create();
        $reservation = [
            "room_id" => $faker->numberBetween(1, 10),
            "customer_id" => $faker->numberBetween(1, 10),
            "check_in_date" => $faker->date('Y-m-d'),
            "check_out_date" => $faker->date('Y-m-d')
        ];
        $response = $this->post('/api/reservation/create', $reservation);
        $response->assertStatus(201);
        $this->assertDatabaseHas('reservations', $reservation);
    }

    public function test_update_route()
    {
        $reservation = Reservation::factory(1)->create()[0];

        $this->seed(CustomerSeeder::class);
        $this->seed(RoomSeeder::class);
        $reservationUpdated = [
            "id" => $reservation->id,
            "room_id" => 2,
            "customer_id" => 4,
            "check_in_date" => "2080-10-21",
            "check_out_date" => "2080-10-25"
        ];

        $response = $this->post('/api/reservation/update', $reservationUpdated);
        $response->assertStatus(201);
        $this->assertDatabaseHas('reservations', $reservationUpdated);
    }

    public function test_delete_route()
    {
        $reservation = Reservation::factory(1)->create()[0];

        $response = $this->delete('/api/reservation/delete/' . $reservation->id);
        $response->assertStatus(201);

        $this->assertDatabaseMissing('reservations', $reservation->toArray());
    }
}
